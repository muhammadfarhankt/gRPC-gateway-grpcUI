// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: intern.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Intern_GetInternInfo_FullMethodName = "/proto.Intern/GetInternInfo"
)

// InternClient is the client API for Intern service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternClient interface {
	GetInternInfo(ctx context.Context, in *GetInternInfoReq, opts ...grpc.CallOption) (*GetInternInfoResponse, error)
}

type internClient struct {
	cc grpc.ClientConnInterface
}

func NewInternClient(cc grpc.ClientConnInterface) InternClient {
	return &internClient{cc}
}

func (c *internClient) GetInternInfo(ctx context.Context, in *GetInternInfoReq, opts ...grpc.CallOption) (*GetInternInfoResponse, error) {
	out := new(GetInternInfoResponse)
	err := c.cc.Invoke(ctx, Intern_GetInternInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternServer is the server API for Intern service.
// All implementations must embed UnimplementedInternServer
// for forward compatibility
type InternServer interface {
	GetInternInfo(context.Context, *GetInternInfoReq) (*GetInternInfoResponse, error)
	mustEmbedUnimplementedInternServer()
}

// UnimplementedInternServer must be embedded to have forward compatible implementations.
type UnimplementedInternServer struct {
}

func (UnimplementedInternServer) GetInternInfo(context.Context, *GetInternInfoReq) (*GetInternInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternInfo not implemented")
}
func (UnimplementedInternServer) mustEmbedUnimplementedInternServer() {}

// UnsafeInternServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternServer will
// result in compilation errors.
type UnsafeInternServer interface {
	mustEmbedUnimplementedInternServer()
}

func RegisterInternServer(s grpc.ServiceRegistrar, srv InternServer) {
	s.RegisterService(&Intern_ServiceDesc, srv)
}

func _Intern_GetInternInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternServer).GetInternInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intern_GetInternInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternServer).GetInternInfo(ctx, req.(*GetInternInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Intern_ServiceDesc is the grpc.ServiceDesc for Intern service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Intern_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Intern",
	HandlerType: (*InternServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInternInfo",
			Handler:    _Intern_GetInternInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intern.proto",
}
